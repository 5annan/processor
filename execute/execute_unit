module execute_unit #(
    parameter instr_len = 32   // Instruction length (bit-width of operands)
)(
    output reg [instr_len-1:0] alu_result,   // Result of the ALU operation
    output reg branch_flag,                  // Branch flag for branch instructions
    
    input [instr_len-1:0] operand_a,         // Operand A (from register file or immediate)
    input [instr_len-1:0] operand_b,         // Operand B (from register file or immediate)
    input [4:0] opcode,                      // Opcode for determining the operation
    input [instr_len-1:0] imm,               // Immediate value (for branch or ALU)
    input imm_flag                           // Flag indicating whether to use immediate or operand_b
);

    always @(*) begin
        branch_flag = 1'b0;  // Default branch flag is 0
        alu_result = 0;      // Default ALU result is 0
        
        case (opcode)
            5'b00000: begin  // BEQ
                branch_flag = (operand_a == operand_b);  // Check if the two operands are equal
            end
            5'b00001: begin  // BNE
                branch_flag = (operand_a != operand_b);  // Check if the two operands are not equal
            end
            5'b10000: begin  // ADD
                alu_result = operand_a + operand_b;      // Perform addition
            end
            5'b10001: begin  // SUB
                alu_result = operand_a - operand_b;      // Perform subtraction
            end
            5'b01000: begin  // ADDI
                alu_result = operand_a + imm;            // Add immediate to operand_a
            end
            default: begin
                alu_result = 0;                          // Default case to avoid latches
            end
        endcase
    end

endmodule
